// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/daemon.dart';
import 'api/log.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -1063182496;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_qb_mobile',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiDaemonDaemonWrapperAdd(
      {required DaemonWrapper that,
      required String name,
      required String contentType,
      required List<int> content});

  Future<void> crateApiDaemonDaemonWrapperBridge(
      {required DaemonWrapper that,
      required BigInt id,
      required List<int> data});

  Future<void> crateApiDaemonDaemonWrapperCancel({required DaemonWrapper that});

  Future<DaemonWrapper> crateApiDaemonDaemonWrapperInit({required String path});

  Future<List<(BigInt, String, String)>> crateApiDaemonDaemonWrapperList(
      {required DaemonWrapper that});

  Future<void> crateApiDaemonDaemonWrapperProcess(
      {required DaemonWrapper that});

  Future<void> crateApiDaemonDaemonWrapperRemove(
      {required DaemonWrapper that, required BigInt id});

  Future<void> crateApiDaemonDaemonWrapperStart(
      {required DaemonWrapper that, required BigInt id});

  Future<void> crateApiDaemonDaemonWrapperStop(
      {required DaemonWrapper that, required BigInt id});

  Stream<Uint8List> crateApiLogInitLog();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DaemonWrapper;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DaemonWrapper;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DaemonWrapperPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiDaemonDaemonWrapperAdd(
      {required DaemonWrapper that,
      required String name,
      required String contentType,
      required List<int> content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(contentType, serializer);
        sse_encode_list_prim_u_8_loose(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperAddConstMeta,
      argValues: [that, name, contentType, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperAddConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_add",
        argNames: ["that", "name", "contentType", "content"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperBridge(
      {required DaemonWrapper that,
      required BigInt id,
      required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        sse_encode_u_64(id, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperBridgeConstMeta,
      argValues: [that, id, data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperBridgeConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_bridge",
        argNames: ["that", "id", "data"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperCancel(
      {required DaemonWrapper that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperCancelConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperCancelConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_cancel",
        argNames: ["that"],
      );

  @override
  Future<DaemonWrapper> crateApiDaemonDaemonWrapperInit(
      {required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperInitConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperInitConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_init",
        argNames: ["path"],
      );

  @override
  Future<List<(BigInt, String, String)>> crateApiDaemonDaemonWrapperList(
      {required DaemonWrapper that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_record_u_64_string_string,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperListConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperListConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_list",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperProcess(
      {required DaemonWrapper that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperProcessConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperProcessConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_process",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperRemove(
      {required DaemonWrapper that, required BigInt id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        sse_encode_u_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperRemoveConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperRemoveConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_remove",
        argNames: ["that", "id"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperStart(
      {required DaemonWrapper that, required BigInt id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        sse_encode_u_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperStartConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperStartConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_start",
        argNames: ["that", "id"],
      );

  @override
  Future<void> crateApiDaemonDaemonWrapperStop(
      {required DaemonWrapper that, required BigInt id}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
            that, serializer);
        sse_encode_u_64(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDaemonDaemonWrapperStopConstMeta,
      argValues: [that, id],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDaemonDaemonWrapperStopConstMeta =>
      const TaskConstMeta(
        debugName: "DaemonWrapper_stop",
        argNames: ["that", "id"],
      );

  @override
  Stream<Uint8List> crateApiLogInitLog() {
    final logSink = RustStreamSink<Uint8List>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_list_prim_u_8_strict_Sse(logSink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiLogInitLogConstMeta,
      argValues: [logSink],
      apiImpl: this,
    )));
    return logSink.stream;
  }

  TaskConstMeta get kCrateApiLogInitLogConstMeta => const TaskConstMeta(
        debugName: "init_log",
        argNames: ["logSink"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_DaemonWrapper => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_DaemonWrapper => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  DaemonWrapper
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DaemonWrapper
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  DaemonWrapper
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<Uint8List> dco_decode_StreamSink_list_prim_u_8_strict_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(BigInt, String, String)> dco_decode_list_record_u_64_string_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_64_string_string)
        .toList();
  }

  @protected
  (BigInt, String, String) dco_decode_record_u_64_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_64(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_String(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  DaemonWrapper
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DaemonWrapper
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DaemonWrapper
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DaemonWrapperImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<Uint8List> sse_decode_StreamSink_list_prim_u_8_strict_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(BigInt, String, String)> sse_decode_list_record_u_64_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_64_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  (BigInt, String, String) sse_decode_record_u_64_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_String(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          DaemonWrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DaemonWrapperImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          DaemonWrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DaemonWrapperImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDaemonWrapper(
          DaemonWrapper self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DaemonWrapperImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_prim_u_8_strict_Sse(
      RustStreamSink<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_u_64_string_string(
      List<(BigInt, String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_64_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_record_u_64_string_string(
      (BigInt, String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_String(self.$3, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class DaemonWrapperImpl extends RustOpaque implements DaemonWrapper {
  // Not to be used by end users
  DaemonWrapperImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DaemonWrapperImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DaemonWrapper,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DaemonWrapper,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DaemonWrapperPtr,
  );

  /// Add an extension to this daemon
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  Future<void> add(
          {required String name,
          required String contentType,
          required List<int> content}) =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperAdd(
          that: this, name: name, contentType: contentType, content: content);

  /// Bridge a message to an interface.
  Future<void> bridge({required BigInt id, required List<int> data}) =>
      RustLib.instance.api
          .crateApiDaemonDaemonWrapperBridge(that: this, id: id, data: data);

  /// Cancel cancelable tasks.
  Future<void> cancel() =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperCancel(
        that: this,
      );

  /// List the connected extensions.
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  Future<List<(BigInt, String, String)>> list() =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperList(
        that: this,
      );

  /// Process the daemon.
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  ///
  /// This task is cancelable using the cancel method.
  Future<void> process() =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperProcess(
        that: this,
      );

  /// Remove an extension to this daemon.
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  Future<void> remove({required BigInt id}) => RustLib.instance.api
      .crateApiDaemonDaemonWrapperRemove(that: this, id: id);

  /// Start an extension for this daemon.
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  Future<void> start({required BigInt id}) =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperStart(that: this, id: id);

  /// Stop an extension for this daemon.
  ///
  /// This will cancel cancelable tasks, which block execution,
  /// as they require mutable access to the daemon.
  Future<void> stop({required BigInt id}) =>
      RustLib.instance.api.crateApiDaemonDaemonWrapperStop(that: this, id: id);
}
